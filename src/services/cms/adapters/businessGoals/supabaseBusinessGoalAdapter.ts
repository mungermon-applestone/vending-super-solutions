
import { CMSBusinessGoal, CMSFeature } from '@/types/cms';
import { BusinessGoalAdapter, BusinessGoalCreateInput, BusinessGoalUpdateInput } from './types';
import { cloneBusinessGoal } from '../../contentTypes/businessGoals/cloneBusinessGoal';

/**
 * Implementation of the Business Goal Adapter for Supabase
 */
export const supabaseBusinessGoalAdapter: BusinessGoalAdapter = {
  getAll: async (): Promise<CMSBusinessGoal[]> => {
    console.log('[supabaseBusinessGoalAdapter] Fetching all business goals');
    
    // Use the existing business goal service
    const { fetchBusinessGoals } = await import('../../contentTypes/businessGoals');
    return await fetchBusinessGoals();
  },
  
  getBySlug: async (slug: string): Promise<CMSBusinessGoal | null> => {
    console.log(`[supabaseBusinessGoalAdapter] Fetching business goal with slug: ${slug}`);
    
    // Use the existing business goal service
    const { fetchBusinessGoalBySlug } = await import('../../contentTypes/businessGoals');
    return await fetchBusinessGoalBySlug(slug);
  },
  
  getById: async (id: string): Promise<CMSBusinessGoal | null> => {
    console.log(`[supabaseBusinessGoalAdapter] Fetching business goal with ID: ${id}`);
    
    // Get all business goals and filter by ID
    const businessGoals = await supabaseBusinessGoalAdapter.getAll();
    return businessGoals.find(goal => goal.id === id) || null;
  },
  
  create: async (data: BusinessGoalCreateInput): Promise<CMSBusinessGoal> => {
    console.log('[supabaseBusinessGoalAdapter] Creating new business goal:', data);
    
    // Transform input data to match the format expected by createBusinessGoal
    const { createBusinessGoal } = await import('../../contentTypes/businessGoals');
    
    // Convert features from the adapter format to the format expected by the service
    const transformedFeatures = data.features?.map(feature => {
      const transformedFeature: CMSFeature = {
        title: feature.title,
        description: feature.description,
        icon: feature.icon
      };
      
      if (feature.screenshot) {
        transformedFeature.screenshot = {
          id: '',  // ID will be generated by the database
          url: feature.screenshot.url,
          alt: feature.screenshot.alt
        };
      }
      
      return transformedFeature;
    }) || [];
    
    // Create the business goal
    const id = await createBusinessGoal({
      title: data.title,
      slug: data.slug,
      description: data.description,
      visible: data.visible,
      icon: data.icon,
      image: data.image ? {
        id: '',  // ID will be generated by the database
        url: data.image.url,
        alt: data.image.alt
      } : undefined,
      benefits: data.benefits,
      features: transformedFeatures
    });
    
    // Fetch and return the newly created business goal
    const newGoal = await supabaseBusinessGoalAdapter.getById(id);
    if (!newGoal) {
      throw new Error(`Failed to retrieve newly created business goal with ID ${id}`);
    }
    
    return newGoal;
  },
  
  update: async (id: string, data: BusinessGoalUpdateInput): Promise<CMSBusinessGoal> => {
    console.log(`[supabaseBusinessGoalAdapter] Updating business goal with ID: ${id}`, data);
    
    // Transform input data to match the format expected by updateBusinessGoal
    const { updateBusinessGoal } = await import('../../contentTypes/businessGoals');
    
    // Convert features from the adapter format to the format expected by the service
    const transformedFeatures = data.features?.map(feature => {
      const transformedFeature: CMSFeature = {
        title: feature.title,
        description: feature.description,
        icon: feature.icon
      };
      
      if (feature.screenshot) {
        transformedFeature.screenshot = {
          id: '',  // ID may be updated or created
          url: feature.screenshot.url,
          alt: feature.screenshot.alt
        };
      }
      
      return transformedFeature;
    }) || [];
    
    // Update the business goal
    const success = await updateBusinessGoal(id, {
      title: data.title,
      slug: data.slug,
      description: data.description,
      visible: data.visible,
      icon: data.icon,
      image: data.image ? {
        id: '',  // ID will be updated if it exists
        url: data.image.url,
        alt: data.image.alt
      } : undefined,
      benefits: data.benefits,
      features: transformedFeatures,
      originalSlug: data.originalSlug
    });
    
    if (!success) {
      throw new Error(`Failed to update business goal with ID ${id}`);
    }
    
    // Fetch and return the updated business goal
    const updatedGoal = await supabaseBusinessGoalAdapter.getById(id);
    if (!updatedGoal) {
      throw new Error(`Failed to retrieve updated business goal with ID ${id}`);
    }
    
    return updatedGoal;
  },
  
  delete: async (id: string): Promise<boolean> => {
    console.log(`[supabaseBusinessGoalAdapter] Deleting business goal with ID: ${id}`);
    
    // Use the existing business goal service
    const { deleteBusinessGoal } = await import('../../contentTypes/businessGoals');
    return await deleteBusinessGoal(id);
  },
  
  clone: async (id: string): Promise<CMSBusinessGoal> => {
    console.log(`[supabaseBusinessGoalAdapter] Cloning business goal with ID: ${id}`);
    
    // Use the existing clone function
    return await cloneBusinessGoal(id);
  }
};
